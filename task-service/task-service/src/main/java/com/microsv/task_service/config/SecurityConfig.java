package com.microsv.task_service.config;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.oauth2.jose.jws.MacAlgorithm;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;
import org.springframework.security.web.SecurityFilterChain;

import javax.crypto.spec.SecretKeySpec;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity // B·∫≠t annotation @PreAuthorize n·∫øu b·∫°n mu·ªën d√πng sau n√†y
public class SecurityConfig {

    @Value("${jwt.secret}")
    private String secretKey;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf
                        .ignoringRequestMatchers("/api/**") // üî• CH·ªà DISABLE CSRF CHO API
                )
                .authorizeHttpRequests(auth -> auth
                        // PUBLIC APIS (n·∫øu c√≥) - v√≠ d·ª•: health check, internal endpoints
                        .requestMatchers("/internal/**").permitAll()
//                        .requestMatchers("/actuator/health").permitAll()

                        // TASK APIS - T·∫§T C·∫¢ C·∫¶N AUTHENTICATION
                        .requestMatchers(HttpMethod.GET, "/api/tasks").authenticated()     // Get all tasks
                        .requestMatchers(HttpMethod.GET, "/api/tasks/**").authenticated()  // Get task by id
                        .requestMatchers(HttpMethod.POST, "/api/tasks").authenticated()    // Create task
                        .requestMatchers(HttpMethod.PUT, "/api/tasks/**").authenticated()  // Update task
                        .requestMatchers(HttpMethod.DELETE, "/api/tasks/**").authenticated() // Delete task

                        // HO·∫∂C ƒë∆°n gi·∫£n h∆°n - t·∫•t c·∫£ task APIs ƒë·ªÅu c·∫ßn auth:
                        // .requestMatchers("/api/tasks/**").authenticated()
// C√≥ th·ªÉ th√™m ph√¢n quy·ªÅn chi ti·∫øt sau:
                        .requestMatchers(HttpMethod.GET, "/api/tasks/admin").hasRole("ADMIN")
                        .requestMatchers(HttpMethod.DELETE, "/api/tasks/**").hasAnyRole("ADMIN")
                        .anyRequest().authenticated() // M·∫∑c ƒë·ªãnh t·∫•t c·∫£ APIs kh√°c c·∫ßn auth
                )
                .oauth2ResourceServer(oauth2 -> oauth2
                        .jwt(jwt -> jwt
                                .decoder(jwtDecoder())
                                .jwtAuthenticationConverter(jwtAuthenticationConverter())
                        )
                );

        return http.build();
    }

    // Bean n√†y s·∫Ω ƒë·ªçc claim "scope" v√† chuy·ªÉn n√≥ th√†nh c√°c quy·ªÅn (authorities)
    @Bean
    public JwtAuthenticationConverter jwtAuthenticationConverter() {
        JwtGrantedAuthoritiesConverter jwtGrantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();
        jwtGrantedAuthoritiesConverter.setAuthoritiesClaimName("scope"); // ƒê·ªçc t·ª´ claim "scope"
        jwtGrantedAuthoritiesConverter.setAuthorityPrefix(""); // B·ªè ti·ªÅn t·ªë "SCOPE_"

        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter);
        return jwtAuthenticationConverter;
    }

    // Bean n√†y ch·ªãu tr√°ch nhi·ªám gi·∫£i m√£ v√† x√°c th·ª±c ch·ªØ k√Ω c·ªßa JWT
    @Bean
    public JwtDecoder jwtDecoder() {
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getBytes(), "HS384");
        return NimbusJwtDecoder
                .withSecretKey(secretKeySpec)
                .macAlgorithm(MacAlgorithm.HS384)
                .build();
    }
}